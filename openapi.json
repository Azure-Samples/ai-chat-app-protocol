{
  "openapi": "3.0.3",
  "info": {
    "title": "Chat AI API - OpenAPI 3.0",
    "description": "OpenAPI description of the AI chat app  API protocol as described by Azure Samples.",
    "contact": {
      "email": "mail@patrickmarchand.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.1.0"
  },
  "externalDocs": {
    "description": "Github page",
    "url": "https://github.com/Azure-Samples/ai-chat-app-protocol?tab=readme-ov-file"
  },
  "servers": [
    {
      "url": "none yet"
    }
  ],
  "tags": [
    {
      "name": "chat",
      "description": "Interactions between client and model"
    }
  ],
  "paths": {
    "/": {
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Post a client message",
        "description": "Submit a new message from the client to the chat AI",
        "operationId": "sendMessage",
        "requestBody": {
          "description": "Client message that should be responded to by the AI",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400Error"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          }
        }
      }
    },
    "/streaming": {
      "post": {
        "tags": [
          "chat"
        ],
        "summary": "Post a client message to the streaming API",
        "description": "Submit a new message from the client to the chat AI and receive a streamed response.",
        "operationId": "sendMessageToStreaming",
        "requestBody": {
          "description": "Client message that should be responded to by the AI through a stream",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json-lines": {
                "schema": {
                  "$ref": "#/components/schemas/ChunkedModelResponse"
                }
              }
            },
            "headers": {
              "Transfer-Encoding": {
                "schema": {
                  "type": "string",
                  "description": "Encoding type",
                  "example": "chunked"
                }
              }
            }
          },
          "400": {
            "description": "Invalid content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400Error"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "500Error": {
        "properties": {
          "error": {
            "type": "string",
            "example": "The app encountered an error processing your request.\\nIf you are an administrator of the app, view the full error in the logs."
          }
        }
      },
      "400Error": {
        "properties": {
          "error": {
            "type": "string",
            "example": "Your message contains content that was flagged by the OpenAI content filter."
          }
        }
      },
      "ClientMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant"
            ],
            "example": "user"
          },
          "content": {
            "type": "string",
            "example": "What is included in my Northwind health insurance ?"
          }
        },
        "description": "A list of messages, each containing \"content\" and \"role\", where \"role\" may be \"assistant\" or \"user\". A single-turn chat app may only contain 1 message, while a multi-turn chat app may contain multiple messages."
      },
      "ClientContext": {
        "description": "An object containing any additional context about the request, such as the temperature to use for the LLM. Each application may define its own context properties",
        "properties": {
          "temperature": {
            "type": "string",
            "description": "The temperature to use for the LLM."
          },
          "top": {
            "type": "integer",
            "example": 3,
            "description": "The number of results to return from the search engine."
          },
          "retrieval_mode": {
            "type": "string",
            "enum": [
              "hybrid",
              "vector",
              "text"
            ],
            "example": "text",
            "description": "The mode to use for the search engine."
          },
          "suggest_followup_questions": {
            "type": "boolean",
            "example": false,
            "description": "Whether to suggest follow-up questions for the chat app."
          },
          "use_oid_security_filter": {
            "type": "boolean",
            "example": false,
            "description": "Whether to use the OID security filter for the search engine."
          },
          "use_groups_security_filter": {
            "type": "boolean",
            "example": false,
            "description": "Whether to use the groups security filter for the search engine."
          },
          "vector_fields": {
            "description": "A list of fields to search for the vector search engine.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "use_gpt4v": {
            "description": "Whether to use a GPT-4V approach.",
            "type": "boolean",
            "example": false
          },
          "gpt4v_input": {
            "description": "The input type to use for a GPT-4V approach.",
            "type": "string",
            "enum": [
              "text",
              "textAndImages",
              "images"
            ],
            "example": "textAndImages"
          }
        }
      },
      "ClientRequest": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientMessage"
            }
          },
          "stream": {
            "type": "boolean",
            "example": false,
            "description": "A boolean indicating whether the response should be streamed or not."
          },
          "context": {
            "$ref": "#/components/schemas/ClientContext"
          },
          "session_state": {
            "type": "object",
            "example": null,
            "description": "An object containing the \"memory\" for the chat app, such as a user ID."
          }
        }
      },
      "ModelContext": {
        "type": "object",
        "description": "An object containing additional details needed for the chat app. Each application can define its own properties.",
        "example": {
          "data_points": {
            "text": [
              {
                "Northwind_Standard_Benefits_Details.pdf#page=91": "Tips for Avoiding Intentionally False Or Misleading Statements:\n When it comes to understanding a health plan, it is important to be aware of any intentionally false or misleading statements that the plan provider may make...(truncated)"
              },
              {
                "Northwind_Standard_Benefits_Details.pdf#page=91": "It is important to  research the providers and services offered in the Northwind Standard plan in order to  determine if the providers and services offered are sufficient for the employee''s needs...(truncated)"
              },
              {
                "Northwind_Standard_Benefits_Details.pdf#page=17": "Employees should keep track of their claims and follow up with  Northwind Health if a claim is not processed in a timely manner...(truncated)"
              }
            ],
            "thoughts": [
              {
                "description": "What is included in my Northwind Health Plus plan that is not in standard?",
                "props": null,
                "title": "Original user query"
              },
              {
                "description": "Northwind Health Plus plan coverage details compared to standard plan",
                "props": {
                  "has_vector": false,
                  "use_semantic_captions": false
                },
                "title": "Generated search query"
              },
              {
                "description": [
                  {
                    "captions": [],
                    "category": null,
                    "content": "Tips for Avoiding Intentionally False Or Misleading Statements: \\nWhen it comes to understanding a health plan, it is important to be aware of any intentionally false or misleading statements that the plan provider may make...(truncated)",
                    "embedding": null,
                    "groups": [],
                    "id": "file-Northwind_Standard_Benefits_Details_pdf-4E6F72746877696E645F5374616E646172645F42656E65666974735F44657461696C732E706466-page-233",
                    "imageEmbedding": null,
                    "oids": [],
                    "sourcefile": "Northwind_Standard_Benefits_Details.pdf",
                    "sourcepage": "Northwind_Standard_Benefits_Details.pdf#page=91"
                  },
                  {
                    "captions": [],
                    "category": null,
                    "content": "It is important to \nresearch the providers and services offered in the Northwind Standard plan in order to \ndetermine if the providers and services offered are sufficient for the employee's needs...(truncated)",
                    "embedding": null,
                    "groups": [],
                    "id": "file-Northwind_Standard_Benefits_Details_pdf-4E6F72746877696E645F5374616E646172645F42656E65666974735F44657461696C732E706466-page-232",
                    "imageEmbedding": null,
                    "oids": [],
                    "sourcefile": "Northwind_Standard_Benefits_Details.pdf",
                    "sourcepage": "Northwind_Standard_Benefits_Details.pdf#page=91"
                  },
                  {
                    "captions": [],
                    "category": null,
                    "content": "Employees should keep track of their claims and follow up with \nNorthwind Health if a claim is not processed in a timely manner...(truncated)",
                    "embedding": null,
                    "groups": [],
                    "id": "file-Northwind_Standard_Benefits_Details_pdf-4E6F72746877696E645F5374616E646172645F42656E65666974735F44657461696C732E706466-page-41",
                    "imageEmbedding": null,
                    "oids": [],
                    "sourcefile": "Northwind_Standard_Benefits_Details.pdf",
                    "sourcepage": "Northwind_Standard_Benefits_Details.pdf#page=17"
                  }
                ],
                "props": null,
                "title": "Results"
              },
              {
                "description": [
                  {
                    "role": "system",
                    "content": "Assistant helps the company employees with their healthcare plan questions, and questions about the employee handbook. Be brief in your answers.\n Answer ONLY with the facts listed in the list of sources below. If there isn't enough information below, say you don't know. Do not generate answers that don't use the sources below. If asking a clarifying question to the user would help, ask the question.\n For tabular information return it as an html table. Do not return markdown format. If the question is not in English, answer in the language used in the question.\n Each source has a name followed by colon and the actual information, always include the source name for each fact you use in the response. Use square brackets to reference the source, for example [info1.txt]. Don't combine sources, list each source separately, for example [info1.txt][info2.pdf]."
                  },
                  {
                    "role": "user",
                    "content": "What is included in my Northwind Health Plus plan that is not in standard?",
                    "Sources": [
                      {
                        "Northwind_Standard_Benefits_Details.pdf#page=91": "Tips for Avoiding Intentionally False Or Misleading Statements:   When it comes to understanding a health plan, it is important to be aware of any  intentiona lly false or misleading statements that the plan provider may make. To avoid  being misled, employees should follow the following tips:(truncated)"
                      },
                      {
                        "Northwind_Standard_Benefits_Details.pdf#page=91": "It is important to  research the providers and services offered in the Northwind Standard plan in order to  determine if the providers and services offered are sufficient for the employee's needs. In addition, Northwind Health may make claims that their plan offers low or no cost  prescription drugs..(truncated)"
                      }
                    ]
                  }
                ],
                "props": null,
                "title": "Prompt"
              }
            ]
          }
        }
      },
      "ModelMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "object",
            "description": "An object containing the actual content of the response.",
            "example": {
              "content": "There is no specific information provided about what is included in the Northwind Health Plus plan that is not in the standard plan. It is recommended to read the plan details carefully and ask questions to understand the specific benefits of the Northwind Health Plus plan [Northwind_Standard_Benefits_Details.pdf#page=91].",
              "function_call": null,
              "role": "assistant",
              "tool_calls": null
            }
          },
          "finish_reason": {
            "type": "string",
            "description": "A string representing the finish state of the response.",
            "example": "stop"
          },
          "index": {
            "type": "integer",
            "description": "A number indicating which response this is (0 in the case of 1 response given).",
            "example": 0
          },
          "context": {
            "$ref": "#/components/schemas/ModelContext"
          },
          "session_state": {
            "type": "object",
            "description": "An object containing the \"memory\" for the chat app, such as a user ID.",
            "example": null
          }
        }
      },
      "ModelResponse": {
        "type": "object",
        "properties": {
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelMessage"
            }
          },
          "created": {
            "type": "integer",
            "format": "seconds",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created.",
            "example": 1706301586
          },
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion. ",
            "example": "chatcmpl-8lNHGormHX5fhozITxASIufDZno9D"
          },
          "model": {
            "type": "string",
            "description": "The model used for the completion",
            "example": "gpt-35-turbo"
          },
          "object": {
            "type": "string",
            "description": "The object type, always \"chat.completion\".",
            "enum": [
              "chat.completion"
            ],
            "example": "chat.completion"
          },
          "usage": {
            "type": "object",
            "description": "Usage statistics for the completion request.",
            "example": {
              "completion_tokens": 64,
              "prompt_tokens": 967,
              "total_tokens": 1031
            }
          }
        }
      },
      "ChunkedChoice": {
        "type": "object",
        "properties": {
          "delta": {
            "type": "object",
            "description": "An object containing the actual content of the response, a token at a time.",
            "example": {
              "role": "assistant"
            }
          },
          "finish_reason": {
            "type": "string",
            "description": "A string representing the finish state of the response.",
            "example": null
          },
          "index": {
            "type": "integer",
            "description": "A number indicating which response this is",
            "example": 0
          },
          "context": {
            "$ref": "#/components/schemas/ModelContext"
          },
          "session_state": {
            "type": "object",
            "description": "An object containing the \"memory\" for the chat app, such as a user ID.",
            "example": null
          }
        }
      },
      "ChunkedModelResponse": {
        "type": "object",
        "properties": {
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChunkedChoice"
            }
          },
          "created": {
            "type": "integer",
            "format": "seconds",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created.",
            "example": 1706302566
          },
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion. ",
            "example": "chatcmpl-8lNHGormHX5fhozITxASIufDZno9D"
          },
          "model": {
            "type": "string",
            "description": "The model used for the completion",
            "example": "gpt-35-turbo"
          },
          "object": {
            "type": "string",
            "description": "The object type, always \"chat.completion\".",
            "enum": [
              "chat.completion"
            ],
            "example": "chat.completion"
          },
          "usage": {
            "type": "object",
            "description": "Usage statistics for the completion request.",
            "example": {
              "completion_tokens": 64,
              "prompt_tokens": 967,
              "total_tokens": 1031
            }
          }
        }
      }
    },
    "requestBodies": {
      "Client": {
        "description": "Message from the client",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ClientRequest"
            }
          }
        }
      }
    }
  }
}